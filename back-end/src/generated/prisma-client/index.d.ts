// Code generated by Prisma (prisma@1.24.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  image: (where?: ImageWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  subscription: (where?: SubscriptionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  address: (where: AddressWhereUniqueInput) => AddressPromise;
  addresses: (
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Address>;
  addressesConnection: (
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AddressConnectionPromise;
  image: (where: ImageWhereUniqueInput) => ImagePromise;
  images: (
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Image>;
  imagesConnection: (
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ImageConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderPromise;
  orders: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Order>;
  ordersConnection: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderConnectionPromise;
  subscription: (where: SubscriptionWhereUniqueInput) => SubscriptionPromise;
  subscriptions: (
    args?: {
      where?: SubscriptionWhereInput;
      orderBy?: SubscriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Subscription>;
  subscriptionsConnection: (
    args?: {
      where?: SubscriptionWhereInput;
      orderBy?: SubscriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SubscriptionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (
    args: { data: AddressUpdateInput; where: AddressWhereUniqueInput }
  ) => AddressPromise;
  updateManyAddresses: (
    args: { data: AddressUpdateManyMutationInput; where?: AddressWhereInput }
  ) => BatchPayloadPromise;
  upsertAddress: (
    args: {
      where: AddressWhereUniqueInput;
      create: AddressCreateInput;
      update: AddressUpdateInput;
    }
  ) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createImage: (data: ImageCreateInput) => ImagePromise;
  updateImage: (
    args: { data: ImageUpdateInput; where: ImageWhereUniqueInput }
  ) => ImagePromise;
  updateManyImages: (
    args: { data: ImageUpdateManyMutationInput; where?: ImageWhereInput }
  ) => BatchPayloadPromise;
  upsertImage: (
    args: {
      where: ImageWhereUniqueInput;
      create: ImageCreateInput;
      update: ImageUpdateInput;
    }
  ) => ImagePromise;
  deleteImage: (where: ImageWhereUniqueInput) => ImagePromise;
  deleteManyImages: (where?: ImageWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (
    args: { data: OrderUpdateInput; where: OrderWhereUniqueInput }
  ) => OrderPromise;
  updateManyOrders: (
    args: { data: OrderUpdateManyMutationInput; where?: OrderWhereInput }
  ) => BatchPayloadPromise;
  upsertOrder: (
    args: {
      where: OrderWhereUniqueInput;
      create: OrderCreateInput;
      update: OrderUpdateInput;
    }
  ) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createSubscription: (data: SubscriptionCreateInput) => SubscriptionPromise;
  updateSubscription: (
    args: { data: SubscriptionUpdateInput; where: SubscriptionWhereUniqueInput }
  ) => SubscriptionPromise;
  updateManySubscriptions: (
    args: {
      data: SubscriptionUpdateManyMutationInput;
      where?: SubscriptionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSubscription: (
    args: {
      where: SubscriptionWhereUniqueInput;
      create: SubscriptionCreateInput;
      update: SubscriptionUpdateInput;
    }
  ) => SubscriptionPromise;
  deleteSubscription: (
    where: SubscriptionWhereUniqueInput
  ) => SubscriptionPromise;
  deleteManySubscriptions: (
    where?: SubscriptionWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  id: (args?: {}) => () => Promise<AsyncIterator<ID_Output>>;
  title: (args?: {}) => () => Promise<AsyncIterator<String>>;
  shortDescription: (args?: {}) => () => Promise<AsyncIterator<String>>;
  longDescription: (args?: {}) => () => Promise<AsyncIterator<String>>;
  totalPrice: (args?: {}) => () => Promise<AsyncIterator<Int>>;
  mealPrice: (args?: {}) => () => Promise<AsyncIterator<Int>>;
  thumbnailImage: (args?: {}) => ImageSubscription;
  largeImage: (args?: {}) => ImageSubscription;
  createdAt: (args?: {}) => () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: (args?: {}) => () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "postcode_ASC"
  | "postcode_DESC"
  | "country_ASC"
  | "country_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SubscriptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "shortDescription_ASC"
  | "shortDescription_DESC"
  | "longDescription_ASC"
  | "longDescription_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "mealPrice_ASC"
  | "mealPrice_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "deliveryTime_ASC"
  | "deliveryTime_DESC"
  | "deliveryDayOfWeek_ASC"
  | "deliveryDayOfWeek_DESC"
  | "paymentDate_ASC"
  | "paymentDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "paymentId_ASC"
  | "paymentId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AddressWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AddressWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  postcode?: Int;
  postcode_not?: Int;
  postcode_in?: Int[] | Int;
  postcode_not_in?: Int[] | Int;
  postcode_lt?: Int;
  postcode_lte?: Int;
  postcode_gt?: Int;
  postcode_gte?: Int;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  AND?: AddressWhereInput[] | AddressWhereInput;
  OR?: AddressWhereInput[] | AddressWhereInput;
  NOT?: AddressWhereInput[] | AddressWhereInput;
}

export type ImageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ImageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: ImageWhereInput[] | ImageWhereInput;
  OR?: ImageWhereInput[] | ImageWhereInput;
  NOT?: ImageWhereInput[] | ImageWhereInput;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SubscriptionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  shortDescription?: String;
  shortDescription_not?: String;
  shortDescription_in?: String[] | String;
  shortDescription_not_in?: String[] | String;
  shortDescription_lt?: String;
  shortDescription_lte?: String;
  shortDescription_gt?: String;
  shortDescription_gte?: String;
  shortDescription_contains?: String;
  shortDescription_not_contains?: String;
  shortDescription_starts_with?: String;
  shortDescription_not_starts_with?: String;
  shortDescription_ends_with?: String;
  shortDescription_not_ends_with?: String;
  longDescription?: String;
  longDescription_not?: String;
  longDescription_in?: String[] | String;
  longDescription_not_in?: String[] | String;
  longDescription_lt?: String;
  longDescription_lte?: String;
  longDescription_gt?: String;
  longDescription_gte?: String;
  longDescription_contains?: String;
  longDescription_not_contains?: String;
  longDescription_starts_with?: String;
  longDescription_not_starts_with?: String;
  longDescription_ends_with?: String;
  longDescription_not_ends_with?: String;
  totalPrice?: Int;
  totalPrice_not?: Int;
  totalPrice_in?: Int[] | Int;
  totalPrice_not_in?: Int[] | Int;
  totalPrice_lt?: Int;
  totalPrice_lte?: Int;
  totalPrice_gt?: Int;
  totalPrice_gte?: Int;
  mealPrice?: Int;
  mealPrice_not?: Int;
  mealPrice_in?: Int[] | Int;
  mealPrice_not_in?: Int[] | Int;
  mealPrice_lt?: Int;
  mealPrice_lte?: Int;
  mealPrice_gt?: Int;
  mealPrice_gte?: Int;
  thumbnailImage?: ImageWhereInput;
  largeImage?: ImageWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SubscriptionWhereInput[] | SubscriptionWhereInput;
  OR?: SubscriptionWhereInput[] | SubscriptionWhereInput;
  NOT?: SubscriptionWhereInput[] | SubscriptionWhereInput;
}

export interface OrderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  subscriptions_every?: SubscriptionWhereInput;
  subscriptions_some?: SubscriptionWhereInput;
  subscriptions_none?: SubscriptionWhereInput;
  billingAddress?: AddressWhereInput;
  shippingAddress?: AddressWhereInput;
  deliveryTime?: String;
  deliveryTime_not?: String;
  deliveryTime_in?: String[] | String;
  deliveryTime_not_in?: String[] | String;
  deliveryTime_lt?: String;
  deliveryTime_lte?: String;
  deliveryTime_gt?: String;
  deliveryTime_gte?: String;
  deliveryTime_contains?: String;
  deliveryTime_not_contains?: String;
  deliveryTime_starts_with?: String;
  deliveryTime_not_starts_with?: String;
  deliveryTime_ends_with?: String;
  deliveryTime_not_ends_with?: String;
  deliveryDayOfWeek?: String;
  deliveryDayOfWeek_not?: String;
  deliveryDayOfWeek_in?: String[] | String;
  deliveryDayOfWeek_not_in?: String[] | String;
  deliveryDayOfWeek_lt?: String;
  deliveryDayOfWeek_lte?: String;
  deliveryDayOfWeek_gt?: String;
  deliveryDayOfWeek_gte?: String;
  deliveryDayOfWeek_contains?: String;
  deliveryDayOfWeek_not_contains?: String;
  deliveryDayOfWeek_starts_with?: String;
  deliveryDayOfWeek_not_starts_with?: String;
  deliveryDayOfWeek_ends_with?: String;
  deliveryDayOfWeek_not_ends_with?: String;
  paymentDate?: DateTimeInput;
  paymentDate_not?: DateTimeInput;
  paymentDate_in?: DateTimeInput[] | DateTimeInput;
  paymentDate_not_in?: DateTimeInput[] | DateTimeInput;
  paymentDate_lt?: DateTimeInput;
  paymentDate_lte?: DateTimeInput;
  paymentDate_gt?: DateTimeInput;
  paymentDate_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: OrderWhereInput[] | OrderWhereInput;
  OR?: OrderWhereInput[] | OrderWhereInput;
  NOT?: OrderWhereInput[] | OrderWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  billingAddress?: AddressWhereInput;
  shippingAddress_every?: AddressWhereInput;
  shippingAddress_some?: AddressWhereInput;
  shippingAddress_none?: AddressWhereInput;
  paymentId?: String;
  paymentId_not?: String;
  paymentId_in?: String[] | String;
  paymentId_not_in?: String[] | String;
  paymentId_lt?: String;
  paymentId_lte?: String;
  paymentId_gt?: String;
  paymentId_gte?: String;
  paymentId_contains?: String;
  paymentId_not_contains?: String;
  paymentId_starts_with?: String;
  paymentId_not_starts_with?: String;
  paymentId_ends_with?: String;
  paymentId_not_ends_with?: String;
  avatar?: ImageWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type SubscriptionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AddressCreateInput {
  address: String;
  city: String;
  postcode?: Int;
  country: String;
}

export interface AddressUpdateInput {
  address?: String;
  city?: String;
  postcode?: Int;
  country?: String;
}

export interface AddressUpdateManyMutationInput {
  address?: String;
  city?: String;
  postcode?: Int;
  country?: String;
}

export interface ImageCreateInput {
  url: String;
}

export interface ImageUpdateInput {
  url?: String;
}

export interface ImageUpdateManyMutationInput {
  url?: String;
}

export interface OrderCreateInput {
  user: UserCreateOneInput;
  subscriptions?: SubscriptionCreateManyInput;
  billingAddress: AddressCreateOneInput;
  shippingAddress: AddressCreateOneInput;
  deliveryTime: String;
  deliveryDayOfWeek: String;
  paymentDate: DateTimeInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  name: String;
  email: String;
  phone: String;
  billingAddress: AddressCreateOneInput;
  shippingAddress?: AddressCreateManyInput;
  paymentId?: String;
  avatar?: ImageCreateOneInput;
}

export interface AddressCreateOneInput {
  create?: AddressCreateInput;
  connect?: AddressWhereUniqueInput;
}

export interface AddressCreateManyInput {
  create?: AddressCreateInput[] | AddressCreateInput;
  connect?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
}

export interface ImageCreateOneInput {
  create?: ImageCreateInput;
  connect?: ImageWhereUniqueInput;
}

export interface SubscriptionCreateManyInput {
  create?: SubscriptionCreateInput[] | SubscriptionCreateInput;
  connect?: SubscriptionWhereUniqueInput[] | SubscriptionWhereUniqueInput;
}

export interface SubscriptionCreateInput {
  title: String;
  shortDescription: String;
  longDescription: String;
  totalPrice: Int;
  mealPrice: Int;
  thumbnailImage: ImageCreateOneInput;
  largeImage: ImageCreateOneInput;
}

export interface OrderUpdateInput {
  user?: UserUpdateOneRequiredInput;
  subscriptions?: SubscriptionUpdateManyInput;
  billingAddress?: AddressUpdateOneRequiredInput;
  shippingAddress?: AddressUpdateOneRequiredInput;
  deliveryTime?: String;
  deliveryDayOfWeek?: String;
  paymentDate?: DateTimeInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  name?: String;
  email?: String;
  phone?: String;
  billingAddress?: AddressUpdateOneRequiredInput;
  shippingAddress?: AddressUpdateManyInput;
  paymentId?: String;
  avatar?: ImageUpdateOneInput;
}

export interface AddressUpdateOneRequiredInput {
  create?: AddressCreateInput;
  update?: AddressUpdateDataInput;
  upsert?: AddressUpsertNestedInput;
  connect?: AddressWhereUniqueInput;
}

export interface AddressUpdateDataInput {
  address?: String;
  city?: String;
  postcode?: Int;
  country?: String;
}

export interface AddressUpsertNestedInput {
  update: AddressUpdateDataInput;
  create: AddressCreateInput;
}

export interface AddressUpdateManyInput {
  create?: AddressCreateInput[] | AddressCreateInput;
  update?:
    | AddressUpdateWithWhereUniqueNestedInput[]
    | AddressUpdateWithWhereUniqueNestedInput;
  upsert?:
    | AddressUpsertWithWhereUniqueNestedInput[]
    | AddressUpsertWithWhereUniqueNestedInput;
  delete?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
  connect?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
  disconnect?: AddressWhereUniqueInput[] | AddressWhereUniqueInput;
  deleteMany?: AddressScalarWhereInput[] | AddressScalarWhereInput;
  updateMany?:
    | AddressUpdateManyWithWhereNestedInput[]
    | AddressUpdateManyWithWhereNestedInput;
}

export interface AddressUpdateWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput;
  data: AddressUpdateDataInput;
}

export interface AddressUpsertWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput;
  update: AddressUpdateDataInput;
  create: AddressCreateInput;
}

export interface AddressScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  postcode?: Int;
  postcode_not?: Int;
  postcode_in?: Int[] | Int;
  postcode_not_in?: Int[] | Int;
  postcode_lt?: Int;
  postcode_lte?: Int;
  postcode_gt?: Int;
  postcode_gte?: Int;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  AND?: AddressScalarWhereInput[] | AddressScalarWhereInput;
  OR?: AddressScalarWhereInput[] | AddressScalarWhereInput;
  NOT?: AddressScalarWhereInput[] | AddressScalarWhereInput;
}

export interface AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput;
  data: AddressUpdateManyDataInput;
}

export interface AddressUpdateManyDataInput {
  address?: String;
  city?: String;
  postcode?: Int;
  country?: String;
}

export interface ImageUpdateOneInput {
  create?: ImageCreateInput;
  update?: ImageUpdateDataInput;
  upsert?: ImageUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ImageWhereUniqueInput;
}

export interface ImageUpdateDataInput {
  url?: String;
}

export interface ImageUpsertNestedInput {
  update: ImageUpdateDataInput;
  create: ImageCreateInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface SubscriptionUpdateManyInput {
  create?: SubscriptionCreateInput[] | SubscriptionCreateInput;
  update?:
    | SubscriptionUpdateWithWhereUniqueNestedInput[]
    | SubscriptionUpdateWithWhereUniqueNestedInput;
  upsert?:
    | SubscriptionUpsertWithWhereUniqueNestedInput[]
    | SubscriptionUpsertWithWhereUniqueNestedInput;
  delete?: SubscriptionWhereUniqueInput[] | SubscriptionWhereUniqueInput;
  connect?: SubscriptionWhereUniqueInput[] | SubscriptionWhereUniqueInput;
  disconnect?: SubscriptionWhereUniqueInput[] | SubscriptionWhereUniqueInput;
  deleteMany?: SubscriptionScalarWhereInput[] | SubscriptionScalarWhereInput;
  updateMany?:
    | SubscriptionUpdateManyWithWhereNestedInput[]
    | SubscriptionUpdateManyWithWhereNestedInput;
}

export interface SubscriptionUpdateWithWhereUniqueNestedInput {
  where: SubscriptionWhereUniqueInput;
  data: SubscriptionUpdateDataInput;
}

export interface SubscriptionUpdateDataInput {
  title?: String;
  shortDescription?: String;
  longDescription?: String;
  totalPrice?: Int;
  mealPrice?: Int;
  thumbnailImage?: ImageUpdateOneRequiredInput;
  largeImage?: ImageUpdateOneRequiredInput;
}

export interface ImageUpdateOneRequiredInput {
  create?: ImageCreateInput;
  update?: ImageUpdateDataInput;
  upsert?: ImageUpsertNestedInput;
  connect?: ImageWhereUniqueInput;
}

export interface SubscriptionUpsertWithWhereUniqueNestedInput {
  where: SubscriptionWhereUniqueInput;
  update: SubscriptionUpdateDataInput;
  create: SubscriptionCreateInput;
}

export interface SubscriptionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  shortDescription?: String;
  shortDescription_not?: String;
  shortDescription_in?: String[] | String;
  shortDescription_not_in?: String[] | String;
  shortDescription_lt?: String;
  shortDescription_lte?: String;
  shortDescription_gt?: String;
  shortDescription_gte?: String;
  shortDescription_contains?: String;
  shortDescription_not_contains?: String;
  shortDescription_starts_with?: String;
  shortDescription_not_starts_with?: String;
  shortDescription_ends_with?: String;
  shortDescription_not_ends_with?: String;
  longDescription?: String;
  longDescription_not?: String;
  longDescription_in?: String[] | String;
  longDescription_not_in?: String[] | String;
  longDescription_lt?: String;
  longDescription_lte?: String;
  longDescription_gt?: String;
  longDescription_gte?: String;
  longDescription_contains?: String;
  longDescription_not_contains?: String;
  longDescription_starts_with?: String;
  longDescription_not_starts_with?: String;
  longDescription_ends_with?: String;
  longDescription_not_ends_with?: String;
  totalPrice?: Int;
  totalPrice_not?: Int;
  totalPrice_in?: Int[] | Int;
  totalPrice_not_in?: Int[] | Int;
  totalPrice_lt?: Int;
  totalPrice_lte?: Int;
  totalPrice_gt?: Int;
  totalPrice_gte?: Int;
  mealPrice?: Int;
  mealPrice_not?: Int;
  mealPrice_in?: Int[] | Int;
  mealPrice_not_in?: Int[] | Int;
  mealPrice_lt?: Int;
  mealPrice_lte?: Int;
  mealPrice_gt?: Int;
  mealPrice_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SubscriptionScalarWhereInput[] | SubscriptionScalarWhereInput;
  OR?: SubscriptionScalarWhereInput[] | SubscriptionScalarWhereInput;
  NOT?: SubscriptionScalarWhereInput[] | SubscriptionScalarWhereInput;
}

export interface SubscriptionUpdateManyWithWhereNestedInput {
  where: SubscriptionScalarWhereInput;
  data: SubscriptionUpdateManyDataInput;
}

export interface SubscriptionUpdateManyDataInput {
  title?: String;
  shortDescription?: String;
  longDescription?: String;
  totalPrice?: Int;
  mealPrice?: Int;
}

export interface OrderUpdateManyMutationInput {
  deliveryTime?: String;
  deliveryDayOfWeek?: String;
  paymentDate?: DateTimeInput;
}

export interface SubscriptionUpdateInput {
  title?: String;
  shortDescription?: String;
  longDescription?: String;
  totalPrice?: Int;
  mealPrice?: Int;
  thumbnailImage?: ImageUpdateOneRequiredInput;
  largeImage?: ImageUpdateOneRequiredInput;
}

export interface SubscriptionUpdateManyMutationInput {
  title?: String;
  shortDescription?: String;
  longDescription?: String;
  totalPrice?: Int;
  mealPrice?: Int;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  phone?: String;
  billingAddress?: AddressUpdateOneRequiredInput;
  shippingAddress?: AddressUpdateManyInput;
  paymentId?: String;
  avatar?: ImageUpdateOneInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  phone?: String;
  paymentId?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Address {
  id: ID_Output;
  address: String;
  city: String;
  postcode?: Int;
  country: String;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  postcode: () => Promise<Int>;
  country: () => Promise<String>;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  postcode: () => Promise<AsyncIterator<Int>>;
  country: () => Promise<AsyncIterator<String>>;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Image {
  id: ID_Output;
  url: String;
}

export interface ImagePromise extends Promise<Image>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
}

export interface ImageSubscription
  extends Promise<AsyncIterator<Image>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface ImageConnection {
  pageInfo: PageInfo;
  edges: ImageEdge[];
}

export interface ImageConnectionPromise
  extends Promise<ImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImageEdge>>() => T;
  aggregate: <T = AggregateImagePromise>() => T;
}

export interface ImageConnectionSubscription
  extends Promise<AsyncIterator<ImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImageSubscription>() => T;
}

export interface ImageEdge {
  node: Image;
  cursor: String;
}

export interface ImageEdgePromise extends Promise<ImageEdge>, Fragmentable {
  node: <T = ImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImageEdgeSubscription
  extends Promise<AsyncIterator<ImageEdge>>,
    Fragmentable {
  node: <T = ImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateImage {
  count: Int;
}

export interface AggregateImagePromise
  extends Promise<AggregateImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImageSubscription
  extends Promise<AsyncIterator<AggregateImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Order {
  id: ID_Output;
  deliveryTime: String;
  deliveryDayOfWeek: String;
  paymentDate: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  subscriptions: <T = FragmentableArray<Subscription>>(
    args?: {
      where?: SubscriptionWhereInput;
      orderBy?: SubscriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  billingAddress: <T = AddressPromise>() => T;
  shippingAddress: <T = AddressPromise>() => T;
  deliveryTime: () => Promise<String>;
  deliveryDayOfWeek: () => Promise<String>;
  paymentDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  subscriptions: <T = Promise<AsyncIterator<SubscriptionSubscription>>>(
    args?: {
      where?: SubscriptionWhereInput;
      orderBy?: SubscriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  billingAddress: <T = AddressSubscription>() => T;
  shippingAddress: <T = AddressSubscription>() => T;
  deliveryTime: () => Promise<AsyncIterator<String>>;
  deliveryDayOfWeek: () => Promise<AsyncIterator<String>>;
  paymentDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  phone: String;
  paymentId?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  billingAddress: <T = AddressPromise>() => T;
  shippingAddress: <T = FragmentableArray<Address>>(
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  paymentId: () => Promise<String>;
  avatar: <T = ImagePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  billingAddress: <T = AddressSubscription>() => T;
  shippingAddress: <T = Promise<AsyncIterator<AddressSubscription>>>(
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  paymentId: () => Promise<AsyncIterator<String>>;
  avatar: <T = ImageSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubscriptionConnection {
  pageInfo: PageInfo;
  edges: SubscriptionEdge[];
}

export interface SubscriptionConnectionPromise
  extends Promise<SubscriptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubscriptionEdge>>() => T;
  aggregate: <T = AggregateSubscriptionPromise>() => T;
}

export interface SubscriptionConnectionSubscription
  extends Promise<AsyncIterator<SubscriptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubscriptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubscriptionSubscription>() => T;
}

export interface SubscriptionEdge {
  node: Subscription;
  cursor: String;
}

export interface SubscriptionEdgePromise
  extends Promise<SubscriptionEdge>,
    Fragmentable {
  node: <T = SubscriptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubscriptionEdgeSubscription
  extends Promise<AsyncIterator<SubscriptionEdge>>,
    Fragmentable {
  node: <T = SubscriptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubscription {
  count: Int;
}

export interface AggregateSubscriptionPromise
  extends Promise<AggregateSubscription>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubscriptionSubscription
  extends Promise<AsyncIterator<AggregateSubscription>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Address",
    embedded: false
  },
  {
    name: "Image",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "Subscription",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
