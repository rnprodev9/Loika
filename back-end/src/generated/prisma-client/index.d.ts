// Code generated by Prisma (prisma@1.24.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  farm: (where?: FarmWhereInput) => Promise<boolean>;
  image: (where?: ImageWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  subscription: (where?: SubscriptionWhereInput) => Promise<boolean>;
  subscriptionItem: (where?: SubscriptionItemWhereInput) => Promise<boolean>;
  unit: (where?: UnitWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  address: (where: AddressWhereUniqueInput) => AddressPromise;
  addresses: (
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Address>;
  addressesConnection: (
    args?: {
      where?: AddressWhereInput;
      orderBy?: AddressOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AddressConnectionPromise;
  farm: (where: FarmWhereUniqueInput) => FarmPromise;
  farms: (
    args?: {
      where?: FarmWhereInput;
      orderBy?: FarmOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Farm>;
  farmsConnection: (
    args?: {
      where?: FarmWhereInput;
      orderBy?: FarmOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FarmConnectionPromise;
  image: (where: ImageWhereUniqueInput) => ImagePromise;
  images: (
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Image>;
  imagesConnection: (
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ImageConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderPromise;
  orders: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Order>;
  ordersConnection: (
    args?: {
      where?: OrderWhereInput;
      orderBy?: OrderOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OrderConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductPromise;
  products: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Product>;
  productsConnection: (
    args?: {
      where?: ProductWhereInput;
      orderBy?: ProductOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProductConnectionPromise;
  subscription: (where: SubscriptionWhereUniqueInput) => SubscriptionPromise;
  subscriptions: (
    args?: {
      where?: SubscriptionWhereInput;
      orderBy?: SubscriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Subscription>;
  subscriptionsConnection: (
    args?: {
      where?: SubscriptionWhereInput;
      orderBy?: SubscriptionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SubscriptionConnectionPromise;
  subscriptionItem: (
    where: SubscriptionItemWhereUniqueInput
  ) => SubscriptionItemPromise;
  subscriptionItems: (
    args?: {
      where?: SubscriptionItemWhereInput;
      orderBy?: SubscriptionItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<SubscriptionItem>;
  subscriptionItemsConnection: (
    args?: {
      where?: SubscriptionItemWhereInput;
      orderBy?: SubscriptionItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SubscriptionItemConnectionPromise;
  unit: (where: UnitWhereUniqueInput) => UnitPromise;
  units: (
    args?: {
      where?: UnitWhereInput;
      orderBy?: UnitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Unit>;
  unitsConnection: (
    args?: {
      where?: UnitWhereInput;
      orderBy?: UnitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UnitConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (
    args: { data: AddressUpdateInput; where: AddressWhereUniqueInput }
  ) => AddressPromise;
  updateManyAddresses: (
    args: { data: AddressUpdateManyMutationInput; where?: AddressWhereInput }
  ) => BatchPayloadPromise;
  upsertAddress: (
    args: {
      where: AddressWhereUniqueInput;
      create: AddressCreateInput;
      update: AddressUpdateInput;
    }
  ) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createFarm: (data: FarmCreateInput) => FarmPromise;
  updateFarm: (
    args: { data: FarmUpdateInput; where: FarmWhereUniqueInput }
  ) => FarmPromise;
  updateManyFarms: (
    args: { data: FarmUpdateManyMutationInput; where?: FarmWhereInput }
  ) => BatchPayloadPromise;
  upsertFarm: (
    args: {
      where: FarmWhereUniqueInput;
      create: FarmCreateInput;
      update: FarmUpdateInput;
    }
  ) => FarmPromise;
  deleteFarm: (where: FarmWhereUniqueInput) => FarmPromise;
  deleteManyFarms: (where?: FarmWhereInput) => BatchPayloadPromise;
  createImage: (data: ImageCreateInput) => ImagePromise;
  updateImage: (
    args: { data: ImageUpdateInput; where: ImageWhereUniqueInput }
  ) => ImagePromise;
  updateManyImages: (
    args: { data: ImageUpdateManyMutationInput; where?: ImageWhereInput }
  ) => BatchPayloadPromise;
  upsertImage: (
    args: {
      where: ImageWhereUniqueInput;
      create: ImageCreateInput;
      update: ImageUpdateInput;
    }
  ) => ImagePromise;
  deleteImage: (where: ImageWhereUniqueInput) => ImagePromise;
  deleteManyImages: (where?: ImageWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (
    args: { data: OrderUpdateInput; where: OrderWhereUniqueInput }
  ) => OrderPromise;
  updateManyOrders: (
    args: { data: OrderUpdateManyMutationInput; where?: OrderWhereInput }
  ) => BatchPayloadPromise;
  upsertOrder: (
    args: {
      where: OrderWhereUniqueInput;
      create: OrderCreateInput;
      update: OrderUpdateInput;
    }
  ) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (
    args: { data: ProductUpdateInput; where: ProductWhereUniqueInput }
  ) => ProductPromise;
  updateManyProducts: (
    args: { data: ProductUpdateManyMutationInput; where?: ProductWhereInput }
  ) => BatchPayloadPromise;
  upsertProduct: (
    args: {
      where: ProductWhereUniqueInput;
      create: ProductCreateInput;
      update: ProductUpdateInput;
    }
  ) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createSubscription: (data: SubscriptionCreateInput) => SubscriptionPromise;
  updateSubscription: (
    args: { data: SubscriptionUpdateInput; where: SubscriptionWhereUniqueInput }
  ) => SubscriptionPromise;
  updateManySubscriptions: (
    args: {
      data: SubscriptionUpdateManyMutationInput;
      where?: SubscriptionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSubscription: (
    args: {
      where: SubscriptionWhereUniqueInput;
      create: SubscriptionCreateInput;
      update: SubscriptionUpdateInput;
    }
  ) => SubscriptionPromise;
  deleteSubscription: (
    where: SubscriptionWhereUniqueInput
  ) => SubscriptionPromise;
  deleteManySubscriptions: (
    where?: SubscriptionWhereInput
  ) => BatchPayloadPromise;
  createSubscriptionItem: (
    data: SubscriptionItemCreateInput
  ) => SubscriptionItemPromise;
  updateSubscriptionItem: (
    args: {
      data: SubscriptionItemUpdateInput;
      where: SubscriptionItemWhereUniqueInput;
    }
  ) => SubscriptionItemPromise;
  updateManySubscriptionItems: (
    args: {
      data: SubscriptionItemUpdateManyMutationInput;
      where?: SubscriptionItemWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSubscriptionItem: (
    args: {
      where: SubscriptionItemWhereUniqueInput;
      create: SubscriptionItemCreateInput;
      update: SubscriptionItemUpdateInput;
    }
  ) => SubscriptionItemPromise;
  deleteSubscriptionItem: (
    where: SubscriptionItemWhereUniqueInput
  ) => SubscriptionItemPromise;
  deleteManySubscriptionItems: (
    where?: SubscriptionItemWhereInput
  ) => BatchPayloadPromise;
  createUnit: (data: UnitCreateInput) => UnitPromise;
  updateUnit: (
    args: { data: UnitUpdateInput; where: UnitWhereUniqueInput }
  ) => UnitPromise;
  updateManyUnits: (
    args: { data: UnitUpdateManyMutationInput; where?: UnitWhereInput }
  ) => BatchPayloadPromise;
  upsertUnit: (
    args: {
      where: UnitWhereUniqueInput;
      create: UnitCreateInput;
      update: UnitUpdateInput;
    }
  ) => UnitPromise;
  deleteUnit: (where: UnitWhereUniqueInput) => UnitPromise;
  deleteManyUnits: (where?: UnitWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  id: (args?: {}) => () => Promise<AsyncIterator<ID_Output>>;
  title: (args?: {}) => () => Promise<AsyncIterator<String>>;
  shortDescription: (args?: {}) => () => Promise<AsyncIterator<String>>;
  longDescription: (args?: {}) => () => Promise<AsyncIterator<String>>;
  totalPrice: (args?: {}) => () => Promise<AsyncIterator<Int>>;
  mealPrice: (args?: {}) => () => Promise<AsyncIterator<Int>>;
  thumbnailImage: (args?: {}) => ImageSubscription;
  largeImages: (
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<AsyncIterator<ImageSubscription>>;
  items: (
    args?: {
      where?: SubscriptionItemWhereInput;
      orderBy?: SubscriptionItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<AsyncIterator<SubscriptionItemSubscription>>;
  createdAt: (args?: {}) => () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: (args?: {}) => () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "addressLine1_ASC"
  | "addressLine1_DESC"
  | "addressLine2_ASC"
  | "addressLine2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "postcode_ASC"
  | "postcode_DESC"
  | "country_ASC"
  | "country_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "itemId_ASC"
  | "itemId_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FarmOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "website_ASC"
  | "website_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "subscriptionId_ASC"
  | "subscriptionId_DESC"
  | "deliveryDate_ASC"
  | "deliveryDate_DESC"
  | "paymentDate_ASC"
  | "paymentDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "shortDescription_ASC"
  | "shortDescription_DESC"
  | "longDescription_ASC"
  | "longDescription_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SubscriptionItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "subscriptionId_ASC"
  | "subscriptionId_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "price_ASC"
  | "price_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SubscriptionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "shortDescription_ASC"
  | "shortDescription_DESC"
  | "longDescription_ASC"
  | "longDescription_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "mealPrice_ASC"
  | "mealPrice_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UnitOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "label_ASC"
  | "label_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "paymentId_ASC"
  | "paymentId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AddressWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface AddressWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  addressLine1?: String;
  addressLine1_not?: String;
  addressLine1_in?: String[] | String;
  addressLine1_not_in?: String[] | String;
  addressLine1_lt?: String;
  addressLine1_lte?: String;
  addressLine1_gt?: String;
  addressLine1_gte?: String;
  addressLine1_contains?: String;
  addressLine1_not_contains?: String;
  addressLine1_starts_with?: String;
  addressLine1_not_starts_with?: String;
  addressLine1_ends_with?: String;
  addressLine1_not_ends_with?: String;
  addressLine2?: String;
  addressLine2_not?: String;
  addressLine2_in?: String[] | String;
  addressLine2_not_in?: String[] | String;
  addressLine2_lt?: String;
  addressLine2_lte?: String;
  addressLine2_gt?: String;
  addressLine2_gte?: String;
  addressLine2_contains?: String;
  addressLine2_not_contains?: String;
  addressLine2_starts_with?: String;
  addressLine2_not_starts_with?: String;
  addressLine2_ends_with?: String;
  addressLine2_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  postcode?: Int;
  postcode_not?: Int;
  postcode_in?: Int[] | Int;
  postcode_not_in?: Int[] | Int;
  postcode_lt?: Int;
  postcode_lte?: Int;
  postcode_gt?: Int;
  postcode_gte?: Int;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  AND?: AddressWhereInput[] | AddressWhereInput;
  OR?: AddressWhereInput[] | AddressWhereInput;
  NOT?: AddressWhereInput[] | AddressWhereInput;
}

export type FarmWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ImageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  itemId?: String;
  itemId_not?: String;
  itemId_in?: String[] | String;
  itemId_not_in?: String[] | String;
  itemId_lt?: String;
  itemId_lte?: String;
  itemId_gt?: String;
  itemId_gte?: String;
  itemId_contains?: String;
  itemId_not_contains?: String;
  itemId_starts_with?: String;
  itemId_not_starts_with?: String;
  itemId_ends_with?: String;
  itemId_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: ImageWhereInput[] | ImageWhereInput;
  OR?: ImageWhereInput[] | ImageWhereInput;
  NOT?: ImageWhereInput[] | ImageWhereInput;
}

export interface FarmWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  website?: String;
  website_not?: String;
  website_in?: String[] | String;
  website_not_in?: String[] | String;
  website_lt?: String;
  website_lte?: String;
  website_gt?: String;
  website_gte?: String;
  website_contains?: String;
  website_not_contains?: String;
  website_starts_with?: String;
  website_not_starts_with?: String;
  website_ends_with?: String;
  website_not_ends_with?: String;
  address?: AddressWhereInput;
  thumbnailImage?: ImageWhereInput;
  largeImages_every?: ImageWhereInput;
  largeImages_some?: ImageWhereInput;
  largeImages_none?: ImageWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: FarmWhereInput[] | FarmWhereInput;
  OR?: FarmWhereInput[] | FarmWhereInput;
  NOT?: FarmWhereInput[] | FarmWhereInput;
}

export type ImageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type OrderWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface OrderWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  userId?: String;
  userId_not?: String;
  userId_in?: String[] | String;
  userId_not_in?: String[] | String;
  userId_lt?: String;
  userId_lte?: String;
  userId_gt?: String;
  userId_gte?: String;
  userId_contains?: String;
  userId_not_contains?: String;
  userId_starts_with?: String;
  userId_not_starts_with?: String;
  userId_ends_with?: String;
  userId_not_ends_with?: String;
  subscriptionId?: String;
  subscriptionId_not?: String;
  subscriptionId_in?: String[] | String;
  subscriptionId_not_in?: String[] | String;
  subscriptionId_lt?: String;
  subscriptionId_lte?: String;
  subscriptionId_gt?: String;
  subscriptionId_gte?: String;
  subscriptionId_contains?: String;
  subscriptionId_not_contains?: String;
  subscriptionId_starts_with?: String;
  subscriptionId_not_starts_with?: String;
  subscriptionId_ends_with?: String;
  subscriptionId_not_ends_with?: String;
  billingAddress?: AddressWhereInput;
  shippingAddress?: AddressWhereInput;
  deliveryDate?: DateTimeInput;
  deliveryDate_not?: DateTimeInput;
  deliveryDate_in?: DateTimeInput[] | DateTimeInput;
  deliveryDate_not_in?: DateTimeInput[] | DateTimeInput;
  deliveryDate_lt?: DateTimeInput;
  deliveryDate_lte?: DateTimeInput;
  deliveryDate_gt?: DateTimeInput;
  deliveryDate_gte?: DateTimeInput;
  paymentDate?: DateTimeInput;
  paymentDate_not?: DateTimeInput;
  paymentDate_in?: DateTimeInput[] | DateTimeInput;
  paymentDate_not_in?: DateTimeInput[] | DateTimeInput;
  paymentDate_lt?: DateTimeInput;
  paymentDate_lte?: DateTimeInput;
  paymentDate_gt?: DateTimeInput;
  paymentDate_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: OrderWhereInput[] | OrderWhereInput;
  OR?: OrderWhereInput[] | OrderWhereInput;
  NOT?: OrderWhereInput[] | OrderWhereInput;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProductWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  shortDescription?: String;
  shortDescription_not?: String;
  shortDescription_in?: String[] | String;
  shortDescription_not_in?: String[] | String;
  shortDescription_lt?: String;
  shortDescription_lte?: String;
  shortDescription_gt?: String;
  shortDescription_gte?: String;
  shortDescription_contains?: String;
  shortDescription_not_contains?: String;
  shortDescription_starts_with?: String;
  shortDescription_not_starts_with?: String;
  shortDescription_ends_with?: String;
  shortDescription_not_ends_with?: String;
  longDescription?: String;
  longDescription_not?: String;
  longDescription_in?: String[] | String;
  longDescription_not_in?: String[] | String;
  longDescription_lt?: String;
  longDescription_lte?: String;
  longDescription_gt?: String;
  longDescription_gte?: String;
  longDescription_contains?: String;
  longDescription_not_contains?: String;
  longDescription_starts_with?: String;
  longDescription_not_starts_with?: String;
  longDescription_ends_with?: String;
  longDescription_not_ends_with?: String;
  thumbnailImage?: ImageWhereInput;
  largeImages_every?: ImageWhereInput;
  largeImages_some?: ImageWhereInput;
  largeImages_none?: ImageWhereInput;
  unit?: UnitWhereInput;
  farm?: FarmWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ProductWhereInput[] | ProductWhereInput;
  OR?: ProductWhereInput[] | ProductWhereInput;
  NOT?: ProductWhereInput[] | ProductWhereInput;
}

export interface UnitWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  label?: String;
  label_not?: String;
  label_in?: String[] | String;
  label_not_in?: String[] | String;
  label_lt?: String;
  label_lte?: String;
  label_gt?: String;
  label_gte?: String;
  label_contains?: String;
  label_not_contains?: String;
  label_starts_with?: String;
  label_not_starts_with?: String;
  label_ends_with?: String;
  label_not_ends_with?: String;
  AND?: UnitWhereInput[] | UnitWhereInput;
  OR?: UnitWhereInput[] | UnitWhereInput;
  NOT?: UnitWhereInput[] | UnitWhereInput;
}

export type SubscriptionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SubscriptionItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  subscriptionId?: String;
  subscriptionId_not?: String;
  subscriptionId_in?: String[] | String;
  subscriptionId_not_in?: String[] | String;
  subscriptionId_lt?: String;
  subscriptionId_lte?: String;
  subscriptionId_gt?: String;
  subscriptionId_gte?: String;
  subscriptionId_contains?: String;
  subscriptionId_not_contains?: String;
  subscriptionId_starts_with?: String;
  subscriptionId_not_starts_with?: String;
  subscriptionId_ends_with?: String;
  subscriptionId_not_ends_with?: String;
  productId?: String;
  productId_not?: String;
  productId_in?: String[] | String;
  productId_not_in?: String[] | String;
  productId_lt?: String;
  productId_lte?: String;
  productId_gt?: String;
  productId_gte?: String;
  productId_contains?: String;
  productId_not_contains?: String;
  productId_starts_with?: String;
  productId_not_starts_with?: String;
  productId_ends_with?: String;
  productId_not_ends_with?: String;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  AND?: SubscriptionItemWhereInput[] | SubscriptionItemWhereInput;
  OR?: SubscriptionItemWhereInput[] | SubscriptionItemWhereInput;
  NOT?: SubscriptionItemWhereInput[] | SubscriptionItemWhereInput;
}

export interface SubscriptionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  shortDescription?: String;
  shortDescription_not?: String;
  shortDescription_in?: String[] | String;
  shortDescription_not_in?: String[] | String;
  shortDescription_lt?: String;
  shortDescription_lte?: String;
  shortDescription_gt?: String;
  shortDescription_gte?: String;
  shortDescription_contains?: String;
  shortDescription_not_contains?: String;
  shortDescription_starts_with?: String;
  shortDescription_not_starts_with?: String;
  shortDescription_ends_with?: String;
  shortDescription_not_ends_with?: String;
  longDescription?: String;
  longDescription_not?: String;
  longDescription_in?: String[] | String;
  longDescription_not_in?: String[] | String;
  longDescription_lt?: String;
  longDescription_lte?: String;
  longDescription_gt?: String;
  longDescription_gte?: String;
  longDescription_contains?: String;
  longDescription_not_contains?: String;
  longDescription_starts_with?: String;
  longDescription_not_starts_with?: String;
  longDescription_ends_with?: String;
  longDescription_not_ends_with?: String;
  totalPrice?: Int;
  totalPrice_not?: Int;
  totalPrice_in?: Int[] | Int;
  totalPrice_not_in?: Int[] | Int;
  totalPrice_lt?: Int;
  totalPrice_lte?: Int;
  totalPrice_gt?: Int;
  totalPrice_gte?: Int;
  mealPrice?: Int;
  mealPrice_not?: Int;
  mealPrice_in?: Int[] | Int;
  mealPrice_not_in?: Int[] | Int;
  mealPrice_lt?: Int;
  mealPrice_lte?: Int;
  mealPrice_gt?: Int;
  mealPrice_gte?: Int;
  thumbnailImage?: ImageWhereInput;
  largeImages_every?: ImageWhereInput;
  largeImages_some?: ImageWhereInput;
  largeImages_none?: ImageWhereInput;
  items_every?: SubscriptionItemWhereInput;
  items_some?: SubscriptionItemWhereInput;
  items_none?: SubscriptionItemWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SubscriptionWhereInput[] | SubscriptionWhereInput;
  OR?: SubscriptionWhereInput[] | SubscriptionWhereInput;
  NOT?: SubscriptionWhereInput[] | SubscriptionWhereInput;
}

export type SubscriptionItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UnitWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  billingAddress?: AddressWhereInput;
  shippingAddress?: AddressWhereInput;
  paymentId?: String;
  paymentId_not?: String;
  paymentId_in?: String[] | String;
  paymentId_not_in?: String[] | String;
  paymentId_lt?: String;
  paymentId_lte?: String;
  paymentId_gt?: String;
  paymentId_gte?: String;
  paymentId_contains?: String;
  paymentId_not_contains?: String;
  paymentId_starts_with?: String;
  paymentId_not_starts_with?: String;
  paymentId_ends_with?: String;
  paymentId_not_ends_with?: String;
  avatar?: ImageWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface AddressCreateInput {
  addressLine1: String;
  addressLine2?: String;
  city: String;
  postcode?: Int;
  country: String;
}

export interface AddressUpdateInput {
  addressLine1?: String;
  addressLine2?: String;
  city?: String;
  postcode?: Int;
  country?: String;
}

export interface AddressUpdateManyMutationInput {
  addressLine1?: String;
  addressLine2?: String;
  city?: String;
  postcode?: Int;
  country?: String;
}

export interface FarmCreateInput {
  title: String;
  email: String;
  phone?: String;
  website?: String;
  address?: AddressCreateOneInput;
  thumbnailImage: ImageCreateOneInput;
  largeImages?: ImageCreateManyInput;
}

export interface AddressCreateOneInput {
  create?: AddressCreateInput;
  connect?: AddressWhereUniqueInput;
}

export interface ImageCreateOneInput {
  create?: ImageCreateInput;
  connect?: ImageWhereUniqueInput;
}

export interface ImageCreateInput {
  itemId?: String;
  url: String;
}

export interface ImageCreateManyInput {
  create?: ImageCreateInput[] | ImageCreateInput;
  connect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
}

export interface FarmUpdateInput {
  title?: String;
  email?: String;
  phone?: String;
  website?: String;
  address?: AddressUpdateOneInput;
  thumbnailImage?: ImageUpdateOneRequiredInput;
  largeImages?: ImageUpdateManyInput;
}

export interface AddressUpdateOneInput {
  create?: AddressCreateInput;
  update?: AddressUpdateDataInput;
  upsert?: AddressUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: AddressWhereUniqueInput;
}

export interface AddressUpdateDataInput {
  addressLine1?: String;
  addressLine2?: String;
  city?: String;
  postcode?: Int;
  country?: String;
}

export interface AddressUpsertNestedInput {
  update: AddressUpdateDataInput;
  create: AddressCreateInput;
}

export interface ImageUpdateOneRequiredInput {
  create?: ImageCreateInput;
  update?: ImageUpdateDataInput;
  upsert?: ImageUpsertNestedInput;
  connect?: ImageWhereUniqueInput;
}

export interface ImageUpdateDataInput {
  itemId?: String;
  url?: String;
}

export interface ImageUpsertNestedInput {
  update: ImageUpdateDataInput;
  create: ImageCreateInput;
}

export interface ImageUpdateManyInput {
  create?: ImageCreateInput[] | ImageCreateInput;
  update?:
    | ImageUpdateWithWhereUniqueNestedInput[]
    | ImageUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ImageUpsertWithWhereUniqueNestedInput[]
    | ImageUpsertWithWhereUniqueNestedInput;
  delete?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  connect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  disconnect?: ImageWhereUniqueInput[] | ImageWhereUniqueInput;
  deleteMany?: ImageScalarWhereInput[] | ImageScalarWhereInput;
  updateMany?:
    | ImageUpdateManyWithWhereNestedInput[]
    | ImageUpdateManyWithWhereNestedInput;
}

export interface ImageUpdateWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateDataInput;
}

export interface ImageUpsertWithWhereUniqueNestedInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateDataInput;
  create: ImageCreateInput;
}

export interface ImageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  itemId?: String;
  itemId_not?: String;
  itemId_in?: String[] | String;
  itemId_not_in?: String[] | String;
  itemId_lt?: String;
  itemId_lte?: String;
  itemId_gt?: String;
  itemId_gte?: String;
  itemId_contains?: String;
  itemId_not_contains?: String;
  itemId_starts_with?: String;
  itemId_not_starts_with?: String;
  itemId_ends_with?: String;
  itemId_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: ImageScalarWhereInput[] | ImageScalarWhereInput;
  OR?: ImageScalarWhereInput[] | ImageScalarWhereInput;
  NOT?: ImageScalarWhereInput[] | ImageScalarWhereInput;
}

export interface ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput;
  data: ImageUpdateManyDataInput;
}

export interface ImageUpdateManyDataInput {
  itemId?: String;
  url?: String;
}

export interface FarmUpdateManyMutationInput {
  title?: String;
  email?: String;
  phone?: String;
  website?: String;
}

export interface ImageUpdateInput {
  itemId?: String;
  url?: String;
}

export interface ImageUpdateManyMutationInput {
  itemId?: String;
  url?: String;
}

export interface OrderCreateInput {
  userId: String;
  subscriptionId: String;
  billingAddress: AddressCreateOneInput;
  shippingAddress: AddressCreateOneInput;
  deliveryDate?: DateTimeInput;
  paymentDate?: DateTimeInput;
}

export interface OrderUpdateInput {
  userId?: String;
  subscriptionId?: String;
  billingAddress?: AddressUpdateOneRequiredInput;
  shippingAddress?: AddressUpdateOneRequiredInput;
  deliveryDate?: DateTimeInput;
  paymentDate?: DateTimeInput;
}

export interface AddressUpdateOneRequiredInput {
  create?: AddressCreateInput;
  update?: AddressUpdateDataInput;
  upsert?: AddressUpsertNestedInput;
  connect?: AddressWhereUniqueInput;
}

export interface OrderUpdateManyMutationInput {
  userId?: String;
  subscriptionId?: String;
  deliveryDate?: DateTimeInput;
  paymentDate?: DateTimeInput;
}

export interface ProductCreateInput {
  title: String;
  shortDescription: String;
  longDescription: String;
  thumbnailImage: ImageCreateOneInput;
  largeImages?: ImageCreateManyInput;
  unit: UnitCreateOneInput;
  farm?: FarmCreateOneInput;
}

export interface UnitCreateOneInput {
  create?: UnitCreateInput;
  connect?: UnitWhereUniqueInput;
}

export interface UnitCreateInput {
  label: String;
}

export interface FarmCreateOneInput {
  create?: FarmCreateInput;
  connect?: FarmWhereUniqueInput;
}

export interface ProductUpdateInput {
  title?: String;
  shortDescription?: String;
  longDescription?: String;
  thumbnailImage?: ImageUpdateOneRequiredInput;
  largeImages?: ImageUpdateManyInput;
  unit?: UnitUpdateOneRequiredInput;
  farm?: FarmUpdateOneInput;
}

export interface UnitUpdateOneRequiredInput {
  create?: UnitCreateInput;
  update?: UnitUpdateDataInput;
  upsert?: UnitUpsertNestedInput;
  connect?: UnitWhereUniqueInput;
}

export interface UnitUpdateDataInput {
  label?: String;
}

export interface UnitUpsertNestedInput {
  update: UnitUpdateDataInput;
  create: UnitCreateInput;
}

export interface FarmUpdateOneInput {
  create?: FarmCreateInput;
  update?: FarmUpdateDataInput;
  upsert?: FarmUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FarmWhereUniqueInput;
}

export interface FarmUpdateDataInput {
  title?: String;
  email?: String;
  phone?: String;
  website?: String;
  address?: AddressUpdateOneInput;
  thumbnailImage?: ImageUpdateOneRequiredInput;
  largeImages?: ImageUpdateManyInput;
}

export interface FarmUpsertNestedInput {
  update: FarmUpdateDataInput;
  create: FarmCreateInput;
}

export interface ProductUpdateManyMutationInput {
  title?: String;
  shortDescription?: String;
  longDescription?: String;
}

export interface SubscriptionCreateInput {
  title: String;
  shortDescription: String;
  longDescription: String;
  totalPrice: Int;
  mealPrice?: Int;
  thumbnailImage: ImageCreateOneInput;
  largeImages?: ImageCreateManyInput;
  items?: SubscriptionItemCreateManyInput;
}

export interface SubscriptionItemCreateManyInput {
  create?: SubscriptionItemCreateInput[] | SubscriptionItemCreateInput;
  connect?:
    | SubscriptionItemWhereUniqueInput[]
    | SubscriptionItemWhereUniqueInput;
}

export interface SubscriptionItemCreateInput {
  subscriptionId: String;
  productId: String;
  quantity: Int;
  price: Int;
}

export interface SubscriptionUpdateInput {
  title?: String;
  shortDescription?: String;
  longDescription?: String;
  totalPrice?: Int;
  mealPrice?: Int;
  thumbnailImage?: ImageUpdateOneRequiredInput;
  largeImages?: ImageUpdateManyInput;
  items?: SubscriptionItemUpdateManyInput;
}

export interface SubscriptionItemUpdateManyInput {
  create?: SubscriptionItemCreateInput[] | SubscriptionItemCreateInput;
  update?:
    | SubscriptionItemUpdateWithWhereUniqueNestedInput[]
    | SubscriptionItemUpdateWithWhereUniqueNestedInput;
  upsert?:
    | SubscriptionItemUpsertWithWhereUniqueNestedInput[]
    | SubscriptionItemUpsertWithWhereUniqueNestedInput;
  delete?:
    | SubscriptionItemWhereUniqueInput[]
    | SubscriptionItemWhereUniqueInput;
  connect?:
    | SubscriptionItemWhereUniqueInput[]
    | SubscriptionItemWhereUniqueInput;
  disconnect?:
    | SubscriptionItemWhereUniqueInput[]
    | SubscriptionItemWhereUniqueInput;
  deleteMany?:
    | SubscriptionItemScalarWhereInput[]
    | SubscriptionItemScalarWhereInput;
  updateMany?:
    | SubscriptionItemUpdateManyWithWhereNestedInput[]
    | SubscriptionItemUpdateManyWithWhereNestedInput;
}

export interface SubscriptionItemUpdateWithWhereUniqueNestedInput {
  where: SubscriptionItemWhereUniqueInput;
  data: SubscriptionItemUpdateDataInput;
}

export interface SubscriptionItemUpdateDataInput {
  subscriptionId?: String;
  productId?: String;
  quantity?: Int;
  price?: Int;
}

export interface SubscriptionItemUpsertWithWhereUniqueNestedInput {
  where: SubscriptionItemWhereUniqueInput;
  update: SubscriptionItemUpdateDataInput;
  create: SubscriptionItemCreateInput;
}

export interface SubscriptionItemScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  subscriptionId?: String;
  subscriptionId_not?: String;
  subscriptionId_in?: String[] | String;
  subscriptionId_not_in?: String[] | String;
  subscriptionId_lt?: String;
  subscriptionId_lte?: String;
  subscriptionId_gt?: String;
  subscriptionId_gte?: String;
  subscriptionId_contains?: String;
  subscriptionId_not_contains?: String;
  subscriptionId_starts_with?: String;
  subscriptionId_not_starts_with?: String;
  subscriptionId_ends_with?: String;
  subscriptionId_not_ends_with?: String;
  productId?: String;
  productId_not?: String;
  productId_in?: String[] | String;
  productId_not_in?: String[] | String;
  productId_lt?: String;
  productId_lte?: String;
  productId_gt?: String;
  productId_gte?: String;
  productId_contains?: String;
  productId_not_contains?: String;
  productId_starts_with?: String;
  productId_not_starts_with?: String;
  productId_ends_with?: String;
  productId_not_ends_with?: String;
  quantity?: Int;
  quantity_not?: Int;
  quantity_in?: Int[] | Int;
  quantity_not_in?: Int[] | Int;
  quantity_lt?: Int;
  quantity_lte?: Int;
  quantity_gt?: Int;
  quantity_gte?: Int;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  AND?: SubscriptionItemScalarWhereInput[] | SubscriptionItemScalarWhereInput;
  OR?: SubscriptionItemScalarWhereInput[] | SubscriptionItemScalarWhereInput;
  NOT?: SubscriptionItemScalarWhereInput[] | SubscriptionItemScalarWhereInput;
}

export interface SubscriptionItemUpdateManyWithWhereNestedInput {
  where: SubscriptionItemScalarWhereInput;
  data: SubscriptionItemUpdateManyDataInput;
}

export interface SubscriptionItemUpdateManyDataInput {
  subscriptionId?: String;
  productId?: String;
  quantity?: Int;
  price?: Int;
}

export interface SubscriptionUpdateManyMutationInput {
  title?: String;
  shortDescription?: String;
  longDescription?: String;
  totalPrice?: Int;
  mealPrice?: Int;
}

export interface SubscriptionItemUpdateInput {
  subscriptionId?: String;
  productId?: String;
  quantity?: Int;
  price?: Int;
}

export interface SubscriptionItemUpdateManyMutationInput {
  subscriptionId?: String;
  productId?: String;
  quantity?: Int;
  price?: Int;
}

export interface UnitUpdateInput {
  label?: String;
}

export interface UnitUpdateManyMutationInput {
  label?: String;
}

export interface UserCreateInput {
  name: String;
  email: String;
  phone: String;
  billingAddress: AddressCreateOneInput;
  shippingAddress: AddressCreateOneInput;
  paymentId?: String;
  avatar?: ImageCreateOneInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  phone?: String;
  billingAddress?: AddressUpdateOneRequiredInput;
  shippingAddress?: AddressUpdateOneRequiredInput;
  paymentId?: String;
  avatar?: ImageUpdateOneInput;
}

export interface ImageUpdateOneInput {
  create?: ImageCreateInput;
  update?: ImageUpdateDataInput;
  upsert?: ImageUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ImageWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  phone?: String;
  paymentId?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Address {
  id: ID_Output;
  addressLine1: String;
  addressLine2?: String;
  city: String;
  postcode?: Int;
  country: String;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  addressLine1: () => Promise<String>;
  addressLine2: () => Promise<String>;
  city: () => Promise<String>;
  postcode: () => Promise<Int>;
  country: () => Promise<String>;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addressLine1: () => Promise<AsyncIterator<String>>;
  addressLine2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  postcode: () => Promise<AsyncIterator<Int>>;
  country: () => Promise<AsyncIterator<String>>;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Farm {
  id: ID_Output;
  title: String;
  email: String;
  phone?: String;
  website?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FarmPromise extends Promise<Farm>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  website: () => Promise<String>;
  address: <T = AddressPromise>() => T;
  thumbnailImage: <T = ImagePromise>() => T;
  largeImages: <T = FragmentableArray<Image>>(
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FarmSubscription
  extends Promise<AsyncIterator<Farm>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  address: <T = AddressSubscription>() => T;
  thumbnailImage: <T = ImageSubscription>() => T;
  largeImages: <T = Promise<AsyncIterator<ImageSubscription>>>(
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Image {
  id: ID_Output;
  itemId?: String;
  url: String;
}

export interface ImagePromise extends Promise<Image>, Fragmentable {
  id: () => Promise<ID_Output>;
  itemId: () => Promise<String>;
  url: () => Promise<String>;
}

export interface ImageSubscription
  extends Promise<AsyncIterator<Image>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  itemId: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface FarmConnection {
  pageInfo: PageInfo;
  edges: FarmEdge[];
}

export interface FarmConnectionPromise
  extends Promise<FarmConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FarmEdge>>() => T;
  aggregate: <T = AggregateFarmPromise>() => T;
}

export interface FarmConnectionSubscription
  extends Promise<AsyncIterator<FarmConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FarmEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFarmSubscription>() => T;
}

export interface FarmEdge {
  node: Farm;
  cursor: String;
}

export interface FarmEdgePromise extends Promise<FarmEdge>, Fragmentable {
  node: <T = FarmPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FarmEdgeSubscription
  extends Promise<AsyncIterator<FarmEdge>>,
    Fragmentable {
  node: <T = FarmSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFarm {
  count: Int;
}

export interface AggregateFarmPromise
  extends Promise<AggregateFarm>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFarmSubscription
  extends Promise<AsyncIterator<AggregateFarm>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ImageConnection {
  pageInfo: PageInfo;
  edges: ImageEdge[];
}

export interface ImageConnectionPromise
  extends Promise<ImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImageEdge>>() => T;
  aggregate: <T = AggregateImagePromise>() => T;
}

export interface ImageConnectionSubscription
  extends Promise<AsyncIterator<ImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImageSubscription>() => T;
}

export interface ImageEdge {
  node: Image;
  cursor: String;
}

export interface ImageEdgePromise extends Promise<ImageEdge>, Fragmentable {
  node: <T = ImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImageEdgeSubscription
  extends Promise<AsyncIterator<ImageEdge>>,
    Fragmentable {
  node: <T = ImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateImage {
  count: Int;
}

export interface AggregateImagePromise
  extends Promise<AggregateImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImageSubscription
  extends Promise<AsyncIterator<AggregateImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Order {
  id: ID_Output;
  userId: String;
  subscriptionId: String;
  deliveryDate?: DateTimeOutput;
  paymentDate?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  subscriptionId: () => Promise<String>;
  billingAddress: <T = AddressPromise>() => T;
  shippingAddress: <T = AddressPromise>() => T;
  deliveryDate: () => Promise<DateTimeOutput>;
  paymentDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
  subscriptionId: () => Promise<AsyncIterator<String>>;
  billingAddress: <T = AddressSubscription>() => T;
  shippingAddress: <T = AddressSubscription>() => T;
  deliveryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  paymentDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Product {
  id: ID_Output;
  title: String;
  shortDescription: String;
  longDescription: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  shortDescription: () => Promise<String>;
  longDescription: () => Promise<String>;
  thumbnailImage: <T = ImagePromise>() => T;
  largeImages: <T = FragmentableArray<Image>>(
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  unit: <T = UnitPromise>() => T;
  farm: <T = FarmPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  shortDescription: () => Promise<AsyncIterator<String>>;
  longDescription: () => Promise<AsyncIterator<String>>;
  thumbnailImage: <T = ImageSubscription>() => T;
  largeImages: <T = Promise<AsyncIterator<ImageSubscription>>>(
    args?: {
      where?: ImageWhereInput;
      orderBy?: ImageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  unit: <T = UnitSubscription>() => T;
  farm: <T = FarmSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Unit {
  id: ID_Output;
  label: String;
}

export interface UnitPromise extends Promise<Unit>, Fragmentable {
  id: () => Promise<ID_Output>;
  label: () => Promise<String>;
}

export interface UnitSubscription
  extends Promise<AsyncIterator<Unit>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  label: () => Promise<AsyncIterator<String>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubscriptionItem {
  id: ID_Output;
  subscriptionId: String;
  productId: String;
  quantity: Int;
  price: Int;
}

export interface SubscriptionItemPromise
  extends Promise<SubscriptionItem>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  subscriptionId: () => Promise<String>;
  productId: () => Promise<String>;
  quantity: () => Promise<Int>;
  price: () => Promise<Int>;
}

export interface SubscriptionItemSubscription
  extends Promise<AsyncIterator<SubscriptionItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  subscriptionId: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Int>>;
}

export interface SubscriptionConnection {
  pageInfo: PageInfo;
  edges: SubscriptionEdge[];
}

export interface SubscriptionConnectionPromise
  extends Promise<SubscriptionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubscriptionEdge>>() => T;
  aggregate: <T = AggregateSubscriptionPromise>() => T;
}

export interface SubscriptionConnectionSubscription
  extends Promise<AsyncIterator<SubscriptionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubscriptionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubscriptionSubscription>() => T;
}

export interface SubscriptionEdge {
  node: Subscription;
  cursor: String;
}

export interface SubscriptionEdgePromise
  extends Promise<SubscriptionEdge>,
    Fragmentable {
  node: <T = SubscriptionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubscriptionEdgeSubscription
  extends Promise<AsyncIterator<SubscriptionEdge>>,
    Fragmentable {
  node: <T = SubscriptionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubscription {
  count: Int;
}

export interface AggregateSubscriptionPromise
  extends Promise<AggregateSubscription>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubscriptionSubscription
  extends Promise<AsyncIterator<AggregateSubscription>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubscriptionItemConnection {
  pageInfo: PageInfo;
  edges: SubscriptionItemEdge[];
}

export interface SubscriptionItemConnectionPromise
  extends Promise<SubscriptionItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubscriptionItemEdge>>() => T;
  aggregate: <T = AggregateSubscriptionItemPromise>() => T;
}

export interface SubscriptionItemConnectionSubscription
  extends Promise<AsyncIterator<SubscriptionItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubscriptionItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubscriptionItemSubscription>() => T;
}

export interface SubscriptionItemEdge {
  node: SubscriptionItem;
  cursor: String;
}

export interface SubscriptionItemEdgePromise
  extends Promise<SubscriptionItemEdge>,
    Fragmentable {
  node: <T = SubscriptionItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubscriptionItemEdgeSubscription
  extends Promise<AsyncIterator<SubscriptionItemEdge>>,
    Fragmentable {
  node: <T = SubscriptionItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSubscriptionItem {
  count: Int;
}

export interface AggregateSubscriptionItemPromise
  extends Promise<AggregateSubscriptionItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubscriptionItemSubscription
  extends Promise<AsyncIterator<AggregateSubscriptionItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UnitConnection {
  pageInfo: PageInfo;
  edges: UnitEdge[];
}

export interface UnitConnectionPromise
  extends Promise<UnitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UnitEdge>>() => T;
  aggregate: <T = AggregateUnitPromise>() => T;
}

export interface UnitConnectionSubscription
  extends Promise<AsyncIterator<UnitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UnitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUnitSubscription>() => T;
}

export interface UnitEdge {
  node: Unit;
  cursor: String;
}

export interface UnitEdgePromise extends Promise<UnitEdge>, Fragmentable {
  node: <T = UnitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UnitEdgeSubscription
  extends Promise<AsyncIterator<UnitEdge>>,
    Fragmentable {
  node: <T = UnitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUnit {
  count: Int;
}

export interface AggregateUnitPromise
  extends Promise<AggregateUnit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUnitSubscription
  extends Promise<AsyncIterator<AggregateUnit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  phone: String;
  paymentId?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  billingAddress: <T = AddressPromise>() => T;
  shippingAddress: <T = AddressPromise>() => T;
  paymentId: () => Promise<String>;
  avatar: <T = ImagePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  billingAddress: <T = AddressSubscription>() => T;
  shippingAddress: <T = AddressSubscription>() => T;
  paymentId: () => Promise<AsyncIterator<String>>;
  avatar: <T = ImageSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Address",
    embedded: false
  },
  {
    name: "Farm",
    embedded: false
  },
  {
    name: "Image",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Subscription",
    embedded: false
  },
  {
    name: "SubscriptionItem",
    embedded: false
  },
  {
    name: "Unit",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
